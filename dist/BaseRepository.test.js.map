{"version":3,"sources":["../dist-esnext/BaseRepository.test.js"],"names":["MONGO_URL","baseRepository","describe","beforeEach","it","entity","id","name","save","entityDb","getById","newName","query","email","find","limit","i","testLimit","entitiesDb","length","entities","push","getByIds"],"mappings":"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","file":"BaseRepository.test.js","sourcesContent":["import { equal, ok } from 'ptz-assert';\r\nimport { createRepository } from './index';\r\nconst MONGO_URL = 'mongodb://localhost:27017/ptz-core-repo';\r\nvar baseRepository;\r\n/* tslint:disable:no-string-literal */\r\ndescribe('BaseRepository', () => {\r\n    beforeEach(async () => {\r\n        baseRepository = await createRepository(MONGO_URL, 'test-collection');\r\n    });\r\n    describe('save', () => {\r\n        it('insert', async () => {\r\n            const entity = {\r\n                id: 'testid',\r\n                name: 'testName'\r\n            };\r\n            await baseRepository.save(entity);\r\n            const entityDb = await baseRepository.getById(entity.id);\r\n            ok(entityDb);\r\n            equal(entityDb.id, entity.id);\r\n        });\r\n        it('update', async () => {\r\n            const entity = {\r\n                id: 'testid',\r\n                name: 'testName'\r\n            };\r\n            entity['name'] = 'teste';\r\n            await baseRepository.save(entity);\r\n            const newName = 'teste2';\r\n            entity['name'] = newName;\r\n            await baseRepository.save(entity);\r\n            const entityDb = await baseRepository.getById(entity.id);\r\n            ok(entityDb);\r\n            equal(entityDb.id, entity.id);\r\n            equal(entityDb['name'], newName);\r\n        });\r\n    });\r\n    describe('find', () => {\r\n        it('by Email', async () => {\r\n            const entity = {\r\n                id: 'testid',\r\n                name: 'testName'\r\n            };\r\n            entity['email'] = 'angeloocana@gmail.com';\r\n            await baseRepository.save(entity);\r\n            const query = {\r\n                email: entity['email']\r\n            };\r\n            const entityDb = await baseRepository.find(query, { limit: 1 });\r\n            ok(entityDb[0]);\r\n            equal(entityDb[0]['email'], entity['email']);\r\n        });\r\n        it('limit by 3', async () => {\r\n            for (let i = 0; i <= 6; i++) {\r\n                const entity = {\r\n                    name: 'testName',\r\n                    id: 'test' + i\r\n                };\r\n                entity['testLimit'] = true;\r\n                entity['i'] = i;\r\n                await baseRepository.save(entity);\r\n            }\r\n            const query = {\r\n                testLimit: true\r\n            };\r\n            const entitiesDb = await baseRepository.find(query, { limit: 3 });\r\n            equal(entitiesDb.length, 3);\r\n        });\r\n    });\r\n    describe('getByIds', () => {\r\n        it('get 3 entities by ids', async () => {\r\n            const entities = [];\r\n            for (let i = 0; i <= 6; i++) {\r\n                const entity = {\r\n                    name: 'testName',\r\n                    id: 'test' + i\r\n                };\r\n                entity['i'] = i;\r\n                entities.push(entity);\r\n                await baseRepository.save(entity);\r\n            }\r\n            const entitiesDb = await baseRepository.getByIds([\r\n                entities[0].id, entities[1].id, entities[2].id\r\n            ]);\r\n            equal(entitiesDb.length, 3);\r\n        });\r\n    });\r\n});\r\n/* tslint:enable:no-string-literal */\r\n//# sourceMappingURL=BaseRepository.test.js.map"]}