{"version":3,"sources":["../dist-esnext/BaseRepository.js"],"names":["getDb","url","connect","getDbCollection","curry","db","collectionName","collection","createRepository","save","getById","getByIds","find","entity","replaceOne","_id","id","upsert","result","ops","findOne","ids","$in","toArray","query","options"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AACA,IAAMA;AAAA,yDAAQ,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAqB,qBAAYC,OAAZ,CAAoBD,GAApB,CAArB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,GAAN;AACA,IAAME,kBAAkB,gBAAEC,KAAF,CAAQ,UAACC,EAAD,EAAKC,cAAL;AAAA,WAAwBD,GAAGE,UAAH,CAAcD,cAAd,CAAxB;AAAA,CAAR,CAAxB;AACA;AACO,IAAME,8CAAmB,gBAAEJ,KAAF;AAAA,0DAAQ,kBAAOE,cAAP,EAAuBL,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACnBD,MAAMC,GAAN,CADmB;;AAAA;AAC9BI,0BAD8B;AAE9BE,kCAF8B,GAEjBJ,gBAAgBE,EAAhB,EAAoBC,cAApB,CAFiB;AAAA,0DAG7B;AACHD,kCADG;AAEHC,0DAFG;AAGHH,4DAHG;AAIHM,kCAAMA,KAAKF,UAAL,CAJH;AAKHG,qCAASA,QAAQH,UAAR,CALN;AAMHI,sCAAUA,SAASJ,UAAT,CANP;AAOHK,kCAAMA,KAAKL,UAAL;AAPH,yBAH6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,IAAzB;AAaP,IAAME,OAAO,gBAAEL,KAAF;AAAA,0DAAQ,kBAAOG,UAAP,EAAmBM,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACIN,WAAWO,UAAX,CAAsB,EAAEC,KAAKF,OAAOG,EAAd,EAAtB,EAA0CH,MAA1C,EAAkD,EAAEI,QAAQ,IAAV,EAAlD,CADJ;;AAAA;AACXC,8BADW;;AAEjBL,iCAASK,OAAOC,GAAP,CAAW,CAAX,CAAT;AAFiB,0DAGVN,MAHU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,IAAb;AAKA,IAAMH,UAAU,gBAAEN,KAAF,CAAQ,UAACG,UAAD,EAAaS,EAAb;AAAA,WAAoBT,WAAWa,OAAX,CAAmB,EAAEL,KAAKC,EAAP,EAAnB,CAApB;AAAA,CAAR,CAAhB;AACA,IAAML,WAAW,gBAAEP,KAAF,CAAQ,UAACG,UAAD,EAAac,GAAb;AAAA,WAAqBd,WAAWK,IAAX,CAAgB,EAAEG,KAAK,EAAEO,KAAKD,GAAP,EAAP,EAAhB,EAAuCE,OAAvC,EAArB;AAAA,CAAR,CAAjB;AACA;AACA;AACA,IAAMX,OAAO,gBAAER,KAAF,CAAQ,UAACG,UAAD,EAAaiB,KAAb,EAAoBC,OAApB;AAAA,WAAgClB,WAAWK,IAAX,CAAgBY,KAAhB,EAAuBC,OAAvB,EAAgCF,OAAhC,EAAhC;AAAA,CAAR,CAAb;QACSd,I,GAAAA,I;QAAMG,I,GAAAA,I;QAAMZ,K,GAAAA,K;QAAOG,e,GAAAA,e;QAAiBO,O,GAAAA,O;QAASC,Q,GAAAA,Q;AACtD","file":"BaseRepository.js","sourcesContent":["import { MongoClient } from 'mongodb';\nimport R from 'ramda';\nconst getDb = async (url) => await MongoClient.connect(url);\nconst getDbCollection = R.curry((db, collectionName) => db.collection(collectionName));\n// tslint:disable-next-line:max-line-length\nexport const createRepository = R.curry(async (collectionName, url) => {\n    const db = await getDb(url);\n    const collection = getDbCollection(db, collectionName);\n    return {\n        db,\n        collectionName,\n        getDbCollection,\n        save: save(collection),\n        getById: getById(collection),\n        getByIds: getByIds(collection),\n        find: find(collection),\n    };\n});\nconst save = R.curry(async (collection, entity) => {\n    const result = await collection.replaceOne({ _id: entity.id }, entity, { upsert: true });\n    entity = result.ops[0];\n    return entity;\n});\nconst getById = R.curry((collection, id) => collection.findOne({ _id: id }));\nconst getByIds = R.curry((collection, ids) => collection.find({ _id: { $in: ids } }).toArray());\n// TODO add FindOptions type to options and remove any when DefinitelyTypes\n// includes find(collection, options:FindOptions)\nconst find = R.curry((collection, query, options) => collection.find(query, options).toArray());\nexport { save, find, getDb, getDbCollection, getById, getByIds };\n//# sourceMappingURL=BaseRepository.js.map"]}