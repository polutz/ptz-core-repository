{"version":3,"sources":["../dist-esnext/BaseRepository.js"],"names":["getDb","url","connect","getDbCollection","curry","db","collectionName","collection","createRepository","save","getById","getByIds","find","entity","result","replaceOne","_id","id","upsert","ops","findOne","ids","$in","toArray","query","options"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AACA,MAAMA;AAAA,iCAAQ,WAAOC,GAAP;AAAA,eAAe,MAAM,qBAAYC,OAAZ,CAAoBD,GAApB,CAArB;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,IAAN;AACA,MAAME,kBAAkB,gBAAEC,KAAF,CAAQ,CAACC,EAAD,EAAKC,cAAL,KAAwBD,GAAGE,UAAH,CAAcD,cAAd,CAAhC,CAAxB;AACO,MAAME,8CAAmB,gBAAEJ,KAAF;AAAA,kCAAQ,WAAOH,GAAP,EAAYK,cAAZ,EAA+B;AACnE,cAAMD,KAAK,MAAML,MAAMC,GAAN,CAAjB;AACA,cAAMM,aAAaJ,gBAAgBE,EAAhB,EAAoBC,cAApB,CAAnB;AACA,eAAO;AACHD,cADG;AAEHC,0BAFG;AAGHH,2BAHG;AAIHM,kBAAMA,KAAKF,UAAL,CAJH;AAKHG,qBAASA,QAAQH,UAAR,CALN;AAMHI,sBAAUA,SAASJ,UAAT,CANP;AAOHK,kBAAMA,KAAKL,UAAL;AAPH,SAAP;AASH,KAZ+B;;AAAA;AAAA;AAAA;AAAA,KAAzB;AAaP,MAAME,OAAO,gBAAEL,KAAF;AAAA,kCAAQ,WAAOG,UAAP,EAAmBM,MAAnB,EAA8B;AAC/C,cAAMC,SAAS,MAAMP,WAAWQ,UAAX,CAAsB,EAAEC,KAAKH,OAAOI,EAAd,EAAtB,EAA0CJ,MAA1C,EAAkD,EAAEK,QAAQ,IAAV,EAAlD,CAArB;AACA,eAAOJ,OAAOK,GAAP,CAAW,CAAX,CAAP;AACH,KAHY;;AAAA;AAAA;AAAA;AAAA,KAAb;AAIA,MAAMT,UAAU,gBAAEN,KAAF,CAAQ,CAACG,UAAD,EAAaU,EAAb,KAAoBV,WAAWa,OAAX,CAAmB,EAAEJ,KAAKC,EAAP,EAAnB,CAA5B,CAAhB;AACA,MAAMN,WAAW,gBAAEP,KAAF,CAAQ,CAACG,UAAD,EAAac,GAAb,KAAqBd,WAAWK,IAAX,CAAgB,EAAEI,KAAK,EAAEM,KAAKD,GAAP,EAAP,EAAhB,EAAuCE,OAAvC,EAA7B,CAAjB;AACA;AACA;AACA,MAAMX,OAAO,gBAAER,KAAF,CAAQ,CAACG,UAAD,EAAaiB,KAAb,EAAoBC,OAApB,KAAgClB,WAAWK,IAAX,CAAgBY,KAAhB,EAAuBC,OAAvB,EAAgCF,OAAhC,EAAxC,CAAb;QACSd,I,GAAAA,I;QAAMG,I,GAAAA,I;QAAMZ,K,GAAAA,K;QAAOG,e,GAAAA,e;QAAiBO,O,GAAAA,O;QAASC,Q,GAAAA,Q;AACtD","file":"BaseRepository.js","sourcesContent":["import { MongoClient } from 'mongodb';\r\nimport R from 'ramda';\r\nconst getDb = async (url) => await MongoClient.connect(url);\r\nconst getDbCollection = R.curry((db, collectionName) => db.collection(collectionName));\r\nexport const createRepository = R.curry(async (url, collectionName) => {\r\n    const db = await getDb(url);\r\n    const collection = getDbCollection(db, collectionName);\r\n    return {\r\n        db,\r\n        collectionName,\r\n        getDbCollection,\r\n        save: save(collection),\r\n        getById: getById(collection),\r\n        getByIds: getByIds(collection),\r\n        find: find(collection),\r\n    };\r\n});\r\nconst save = R.curry(async (collection, entity) => {\r\n    const result = await collection.replaceOne({ _id: entity.id }, entity, { upsert: true });\r\n    return result.ops[0];\r\n});\r\nconst getById = R.curry((collection, id) => collection.findOne({ _id: id }));\r\nconst getByIds = R.curry((collection, ids) => collection.find({ _id: { $in: ids } }).toArray());\r\n// TODO add FindOptions type to options and remove any when DefinitelyTypes\r\n// includes find(collection, options:FindOptions)\r\nconst find = R.curry((collection, query, options) => collection.find(query, options).toArray());\r\nexport { save, find, getDb, getDbCollection, getById, getByIds };\r\n//# sourceMappingURL=BaseRepository.js.map"]}